### YamlMime:ManagedReference
items:
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager
  commentId: T:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager
  id: AmazonAlexaManager
  parent: AmazonsAlexa.Unity.AlexaCommunicationModule
  children:
  - AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,GameObject,System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData},System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData},System.Boolean)
  - AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.alexaUserDynamoKey
  - AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.channel
  - AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.GetSessionAttributes(System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData})
  - AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.handleConnectionStatusCallback
  - AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.handleMessageCallback
  - AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SendToAlexaSkill(System.Object,System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData})
  - AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SetSessionAttributes(System.Collections.Generic.Dictionary{System.String,AttributeValue},System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData})
  langs:
  - csharp
  - vb
  name: AmazonAlexaManager
  nameWithType: AmazonAlexaManager
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager
  type: Class
  source:
    id: AmazonAlexaManager
    path: ''
    startLine: 19
  assemblies:
  - cs.temp.dll
  namespace: AmazonsAlexa.Unity.AlexaCommunicationModule
  summary: 'Amazon Alexa Manager '
  remarks: 'Austin Wilson, 9/15/2018. '
  example: []
  syntax:
    content: public class AmazonAlexaManager
    content.vb: Public Class AmazonAlexaManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.channel
  commentId: P:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.channel
  id: channel
  parent: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager
  langs:
  - csharp
  - vb
  name: channel
  nameWithType: AmazonAlexaManager.channel
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.channel
  type: Property
  source:
    id: channel
    path: ''
    startLine: 28
  assemblies:
  - cs.temp.dll
  namespace: AmazonsAlexa.Unity.AlexaCommunicationModule
  summary: 'Resets your player&apos;s channel. (Should be unique to the player) '
  example: []
  syntax:
    content: public string channel { set; }
    parameters: []
    return:
      type: System.String
      description: 'The channel. '
    content.vb: Public WriteOnly Property channel As String
  overload: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.channel*
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.alexaUserDynamoKey
  commentId: P:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.alexaUserDynamoKey
  id: alexaUserDynamoKey
  parent: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager
  langs:
  - csharp
  - vb
  name: alexaUserDynamoKey
  nameWithType: AmazonAlexaManager.alexaUserDynamoKey
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.alexaUserDynamoKey
  type: Property
  source:
    id: alexaUserDynamoKey
    path: ''
    startLine: 43
  assemblies:
  - cs.temp.dll
  namespace: AmazonsAlexa.Unity.AlexaCommunicationModule
  summary: 'Gets or Resets the player&apos;s DynanoDB table key. '
  example: []
  syntax:
    content: public string alexaUserDynamoKey { get; set; }
    parameters: []
    return:
      type: System.String
      description: 'The alexa user dynamo key. '
    content.vb: Public Property alexaUserDynamoKey As String
  overload: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.alexaUserDynamoKey*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.handleMessageCallback
  commentId: F:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.handleMessageCallback
  id: handleMessageCallback
  parent: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager
  langs:
  - csharp
  - vb
  name: handleMessageCallback
  nameWithType: AmazonAlexaManager.handleMessageCallback
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.handleMessageCallback
  type: Field
  source:
    id: handleMessageCallback
    path: ''
    startLine: 57
  assemblies:
  - cs.temp.dll
  namespace: AmazonsAlexa.Unity.AlexaCommunicationModule
  summary: 'The message recieved callback. '
  example: []
  syntax:
    content: public Action<HandleMessageEventData> handleMessageCallback
    return:
      type: System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData}
    content.vb: Public handleMessageCallback As Action(Of HandleMessageEventData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.handleConnectionStatusCallback
  commentId: F:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.handleConnectionStatusCallback
  id: handleConnectionStatusCallback
  parent: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager
  langs:
  - csharp
  - vb
  name: handleConnectionStatusCallback
  nameWithType: AmazonAlexaManager.handleConnectionStatusCallback
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.handleConnectionStatusCallback
  type: Field
  source:
    id: handleConnectionStatusCallback
    path: ''
    startLine: 60
  assemblies:
  - cs.temp.dll
  namespace: AmazonsAlexa.Unity.AlexaCommunicationModule
  summary: 'The connection status recieved callback. '
  example: []
  syntax:
    content: public Action<ConnectionStatusEventData> handleConnectionStatusCallback
    return:
      type: System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData}
    content.vb: Public handleConnectionStatusCallback As Action(Of ConnectionStatusEventData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,GameObject,System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData},System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData},System.Boolean)
  commentId: M:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,GameObject,System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData},System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData},System.Boolean)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String,System.String,GameObject,System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData},System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData},System.Boolean)'
  parent: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager
  langs:
  - csharp
  - vb
  name: AmazonAlexaManager(String, String, String, String, String, String, GameObject, Action<HandleMessageEventData>, Action<ConnectionStatusEventData>, Boolean)
  nameWithType: AmazonAlexaManager.AmazonAlexaManager(String, String, String, String, String, String, GameObject, Action<HandleMessageEventData>, Action<ConnectionStatusEventData>, Boolean)
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.AmazonAlexaManager(System.String, System.String, System.String, System.String, System.String, System.String, GameObject, System.Action<AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData>, System.Action<AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData>, System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 139
  assemblies:
  - cs.temp.dll
  namespace: AmazonsAlexa.Unity.AlexaCommunicationModule
  summary: 'AmazonAlexaManager Constructor. '
  remarks: 'Austin Wilson, 9/15/2018. '
  example: []
  syntax:
    content: public AmazonAlexaManager(string publishKey, string subscribeKey, string channel, string tableName, string identityPoolId, string AWSRegion, GameObject gameObject, Action<HandleMessageEventData> messageCallback, Action<ConnectionStatusEventData> connectionStatusCallback, bool debug = false)
    parameters:
    - id: publishKey
      type: System.String
      description: 'Your PubNub publish key. '
    - id: subscribeKey
      type: System.String
      description: 'Your PubNub subscribe key. '
    - id: channel
      type: System.String
      description: 'Your player&apos;s channel. (Should be unique to the player) '
    - id: tableName
      type: System.String
      description: 'Name of your skill&apos;s DynamoDB table where the persistant attributes are stored. '
    - id: identityPoolId
      type: System.String
      description: 'Identifier of your AWS Cognito identity pool. '
    - id: AWSRegion
      type: System.String
      description: 'The AWS Region where your DynamoDB table and Cognito identity pool are hosted. '
    - id: gameObject
      type: GameObject
      description: 'The GameObject you are attaching this manager instance to. '
    - id: messageCallback
      type: System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData}
      description: 'The callback for when a message is recived from your Alexa Skill. '
    - id: connectionStatusCallback
      type: System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData}
    - id: debug
      type: System.Boolean
      description: '(Optional) True to debug. '
    content.vb: Public Sub New(publishKey As String, subscribeKey As String, channel As String, tableName As String, identityPoolId As String, AWSRegion As String, gameObject As GameObject, messageCallback As Action(Of HandleMessageEventData), connectionStatusCallback As Action(Of ConnectionStatusEventData), debug As Boolean = False)
  overload: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.#ctor*
  nameWithType.vb: AmazonAlexaManager.AmazonAlexaManager(String, String, String, String, String, String, GameObject, Action(Of HandleMessageEventData), Action(Of ConnectionStatusEventData), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.AmazonAlexaManager(System.String, System.String, System.String, System.String, System.String, System.String, GameObject, System.Action(Of AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData), System.Action(Of AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData), System.Boolean)
  name.vb: AmazonAlexaManager(String, String, String, String, String, String, GameObject, Action(Of HandleMessageEventData), Action(Of ConnectionStatusEventData), Boolean)
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.GetSessionAttributes(System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData})
  commentId: M:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.GetSessionAttributes(System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData})
  id: GetSessionAttributes(System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData})
  parent: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager
  langs:
  - csharp
  - vb
  name: GetSessionAttributes(Action<GetSessionAttributesEventData>)
  nameWithType: AmazonAlexaManager.GetSessionAttributes(Action<GetSessionAttributesEventData>)
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.GetSessionAttributes(System.Action<AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData>)
  type: Method
  source:
    id: GetSessionAttributes
    path: ''
    startLine: 187
  assemblies:
  - cs.temp.dll
  namespace: AmazonsAlexa.Unity.AlexaCommunicationModule
  summary: 'Gets the Skill&apos;s persistant session attributes from DynamoDB. '
  remarks: 'Austin Wilson, 9/15/2018. '
  example: []
  syntax:
    content: public void GetSessionAttributes(Action<GetSessionAttributesEventData> callback)
    parameters:
    - id: callback
      type: System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData}
      description: 'The callback. '
    content.vb: Public Sub GetSessionAttributes(callback As Action(Of GetSessionAttributesEventData))
  overload: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.GetSessionAttributes*
  nameWithType.vb: AmazonAlexaManager.GetSessionAttributes(Action(Of GetSessionAttributesEventData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.GetSessionAttributes(System.Action(Of AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData))
  name.vb: GetSessionAttributes(Action(Of GetSessionAttributesEventData))
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SetSessionAttributes(System.Collections.Generic.Dictionary{System.String,AttributeValue},System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData})
  commentId: M:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SetSessionAttributes(System.Collections.Generic.Dictionary{System.String,AttributeValue},System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData})
  id: SetSessionAttributes(System.Collections.Generic.Dictionary{System.String,AttributeValue},System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData})
  parent: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager
  langs:
  - csharp
  - vb
  name: SetSessionAttributes(Dictionary<String, AttributeValue>, Action<SetSessionAttributesEventData>)
  nameWithType: AmazonAlexaManager.SetSessionAttributes(Dictionary<String, AttributeValue>, Action<SetSessionAttributesEventData>)
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SetSessionAttributes(System.Collections.Generic.Dictionary<System.String, AttributeValue>, System.Action<AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData>)
  type: Method
  source:
    id: SetSessionAttributes
    path: ''
    startLine: 236
  assemblies:
  - cs.temp.dll
  namespace: AmazonsAlexa.Unity.AlexaCommunicationModule
  summary: 'Sets the Skill&apos;s persistant session attributes in DynamoDB. '
  remarks: 'Austin Wilson, 9/15/2018. '
  example: []
  syntax:
    content: public void SetSessionAttributes(Dictionary<string, AttributeValue> attributes, Action<SetSessionAttributesEventData> callback)
    parameters:
    - id: attributes
      type: System.Collections.Generic.Dictionary{System.String,AttributeValue}
      description: 'The attributes to set. '
    - id: callback
      type: System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData}
      description: 'The callback. '
    content.vb: Public Sub SetSessionAttributes(attributes As Dictionary(Of String, AttributeValue), callback As Action(Of SetSessionAttributesEventData))
  overload: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SetSessionAttributes*
  nameWithType.vb: AmazonAlexaManager.SetSessionAttributes(Dictionary(Of String, AttributeValue), Action(Of SetSessionAttributesEventData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SetSessionAttributes(System.Collections.Generic.Dictionary(Of System.String, AttributeValue), System.Action(Of AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData))
  name.vb: SetSessionAttributes(Dictionary(Of String, AttributeValue), Action(Of SetSessionAttributesEventData))
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SendToAlexaSkill(System.Object,System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData})
  commentId: M:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SendToAlexaSkill(System.Object,System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData})
  id: SendToAlexaSkill(System.Object,System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData})
  parent: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager
  langs:
  - csharp
  - vb
  name: SendToAlexaSkill(Object, Action<MessageSentEventData>)
  nameWithType: AmazonAlexaManager.SendToAlexaSkill(Object, Action<MessageSentEventData>)
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SendToAlexaSkill(System.Object, System.Action<AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData>)
  type: Method
  source:
    id: SendToAlexaSkill
    path: ''
    startLine: 273
  assemblies:
  - cs.temp.dll
  namespace: AmazonsAlexa.Unity.AlexaCommunicationModule
  summary: 'Sends a message to Alexa Skill. NOTE: Skill will only recieve the message if it is listening for a response. '
  remarks: 'Austin Wilson, 9/15/2018. '
  example: []
  syntax:
    content: public void SendToAlexaSkill(object message, Action<MessageSentEventData> callback)
    parameters:
    - id: message
      type: System.Object
      description: 'The message. '
    - id: callback
      type: System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData}
      description: 'The callback. '
    content.vb: Public Sub SendToAlexaSkill(message As Object, callback As Action(Of MessageSentEventData))
  overload: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SendToAlexaSkill*
  nameWithType.vb: AmazonAlexaManager.SendToAlexaSkill(Object, Action(Of MessageSentEventData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SendToAlexaSkill(System.Object, System.Action(Of AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData))
  name.vb: SendToAlexaSkill(Object, Action(Of MessageSentEventData))
references:
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule
  commentId: N:AmazonsAlexa.Unity.AlexaCommunicationModule
  name: AmazonsAlexa.Unity.AlexaCommunicationModule
  nameWithType: AmazonsAlexa.Unity.AlexaCommunicationModule
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.channel*
  commentId: Overload:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.channel
  name: channel
  nameWithType: AmazonAlexaManager.channel
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.channel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.alexaUserDynamoKey*
  commentId: Overload:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.alexaUserDynamoKey
  name: alexaUserDynamoKey
  nameWithType: AmazonAlexaManager.alexaUserDynamoKey
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.alexaUserDynamoKey
- uid: System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData}
  commentId: T:System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData}
  parent: System
  definition: System.Action`1
  name: Action<HandleMessageEventData>
  nameWithType: Action<HandleMessageEventData>
  fullName: System.Action<AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData>
  nameWithType.vb: Action(Of HandleMessageEventData)
  fullName.vb: System.Action(Of AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData)
  name.vb: Action(Of HandleMessageEventData)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData
    name: HandleMessageEventData
    nameWithType: HandleMessageEventData
    fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData
    name: HandleMessageEventData
    nameWithType: HandleMessageEventData
    fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.HandleMessageEventData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData}
  commentId: T:System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData}
  parent: System
  definition: System.Action`1
  name: Action<ConnectionStatusEventData>
  nameWithType: Action<ConnectionStatusEventData>
  fullName: System.Action<AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData>
  nameWithType.vb: Action(Of ConnectionStatusEventData)
  fullName.vb: System.Action(Of AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData)
  name.vb: Action(Of ConnectionStatusEventData)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData
    name: ConnectionStatusEventData
    nameWithType: ConnectionStatusEventData
    fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData
    name: ConnectionStatusEventData
    nameWithType: ConnectionStatusEventData
    fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.ConnectionStatusEventData
  - name: )
    nameWithType: )
    fullName: )
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.#ctor*
  commentId: Overload:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.#ctor
  name: AmazonAlexaManager
  nameWithType: AmazonAlexaManager.AmazonAlexaManager
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.AmazonAlexaManager
- uid: GameObject
  commentId: '!:GameObject'
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: GameObject
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.GetSessionAttributes*
  commentId: Overload:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.GetSessionAttributes
  name: GetSessionAttributes
  nameWithType: AmazonAlexaManager.GetSessionAttributes
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.GetSessionAttributes
- uid: System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData}
  commentId: T:System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData}
  parent: System
  definition: System.Action`1
  name: Action<GetSessionAttributesEventData>
  nameWithType: Action<GetSessionAttributesEventData>
  fullName: System.Action<AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData>
  nameWithType.vb: Action(Of GetSessionAttributesEventData)
  fullName.vb: System.Action(Of AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData)
  name.vb: Action(Of GetSessionAttributesEventData)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData
    name: GetSessionAttributesEventData
    nameWithType: GetSessionAttributesEventData
    fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData
    name: GetSessionAttributesEventData
    nameWithType: GetSessionAttributesEventData
    fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.GetSessionAttributesEventData
  - name: )
    nameWithType: )
    fullName: )
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SetSessionAttributes*
  commentId: Overload:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SetSessionAttributes
  name: SetSessionAttributes
  nameWithType: AmazonAlexaManager.SetSessionAttributes
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SetSessionAttributes
- uid: System.Collections.Generic.Dictionary{System.String,AttributeValue}
  commentId: T:System.Collections.Generic.Dictionary{System.String,AttributeValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, AttributeValue>
  nameWithType: Dictionary<String, AttributeValue>
  fullName: System.Collections.Generic.Dictionary<System.String, AttributeValue>
  nameWithType.vb: Dictionary(Of String, AttributeValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, AttributeValue)
  name.vb: Dictionary(Of String, AttributeValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AttributeValue
    name: AttributeValue
    nameWithType: AttributeValue
    fullName: AttributeValue
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AttributeValue
    name: AttributeValue
    nameWithType: AttributeValue
    fullName: AttributeValue
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData}
  commentId: T:System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData}
  parent: System
  definition: System.Action`1
  name: Action<SetSessionAttributesEventData>
  nameWithType: Action<SetSessionAttributesEventData>
  fullName: System.Action<AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData>
  nameWithType.vb: Action(Of SetSessionAttributesEventData)
  fullName.vb: System.Action(Of AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData)
  name.vb: Action(Of SetSessionAttributesEventData)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData
    name: SetSessionAttributesEventData
    nameWithType: SetSessionAttributesEventData
    fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData
    name: SetSessionAttributesEventData
    nameWithType: SetSessionAttributesEventData
    fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.SetSessionAttributesEventData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SendToAlexaSkill*
  commentId: Overload:AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SendToAlexaSkill
  name: SendToAlexaSkill
  nameWithType: AmazonAlexaManager.SendToAlexaSkill
  fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.AmazonAlexaManager.SendToAlexaSkill
- uid: System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData}
  commentId: T:System.Action{AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData}
  parent: System
  definition: System.Action`1
  name: Action<MessageSentEventData>
  nameWithType: Action<MessageSentEventData>
  fullName: System.Action<AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData>
  nameWithType.vb: Action(Of MessageSentEventData)
  fullName.vb: System.Action(Of AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData)
  name.vb: Action(Of MessageSentEventData)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData
    name: MessageSentEventData
    nameWithType: MessageSentEventData
    fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData
    name: MessageSentEventData
    nameWithType: MessageSentEventData
    fullName: AmazonsAlexa.Unity.AlexaCommunicationModule.MessageSentEventData
  - name: )
    nameWithType: )
    fullName: )
